/home/arslan/Downloads/OpenFPGA/build/yosys/bin/yosys yosys.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)


-- Executing script file `yosys.ys' --

1. Executing Verilog-2005 frontend: ./benchmark/pipelined_8bit_adder.v
Parsing Verilog input from `./benchmark/pipelined_8bit_adder.v' to AST representation.
Generating RTLIL representation for module `\pipelined_8bit_adder'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/arslan/Downloads/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_cell_sim.v
Parsing Verilog input from `/home/arslan/Downloads/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_cell_sim.v' to AST representation.
Generating RTLIL representation for module `\dpram_1024x8_core'.
Generating RTLIL representation for module `\dpram_1024x8'.
Generating RTLIL representation for module `\mult_36'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \pipelined_8bit_adder

3.2. Analyzing design hierarchy..
Top module:  \pipelined_8bit_adder
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./benchmark/pipelined_8bit_adder.v:90$3 in module pipelined_8bit_adder.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 11 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
     1/4: $1$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$9
     2/4: $1$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_DATA[7:0]$8
     3/4: $1$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_ADDR[8:0]$7
     4/4: $0\q_int[7:0]

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pipelined_8bit_adder.\a_st0' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$23' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.\a_st1' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$24' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.\b_st0' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$25' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.\b_st1' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$26' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.\waddr_st0' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$27' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.\waddr_st1' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$28' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.\wen_st0' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$29' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.\wen_st1' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$30' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.\q_int' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$31' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_ADDR' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$32' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_DATA' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$33' with positive edge clock.
Creating register for signal `\pipelined_8bit_adder.$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN' using process `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
  created $dff cell `$procdff$34' with positive edge clock.

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
Removing empty process `pipelined_8bit_adder.$proc$./benchmark/pipelined_8bit_adder.v:90$3'.
Cleaned up 2 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..
Removed 3 unused cells and 23 unused wires.
<suppressed ~4 debug messages>

9. Executing DEMINOUT pass (demote inout ports to input or output).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
    Consolidated identical input bits for $mux cell $procmux$13:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6
      New ports: A=1'0, B=1'1, Y=$0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [0]
      New connections: $0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [7:1] = { $0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [0] $0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [0] $0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [0] $0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [0] $0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [0] $0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [0] $0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_EN[7:0]$6 [0] }
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 1 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 6 on $procdff$27 ($dff) from module pipelined_8bit_adder.
Setting constant 0-bit at position 7 on $procdff$27 ($dff) from module pipelined_8bit_adder.
Setting constant 0-bit at position 8 on $procdff$27 ($dff) from module pipelined_8bit_adder.

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 6 on $procdff$28 ($dff) from module pipelined_8bit_adder.
Setting constant 0-bit at position 7 on $procdff$28 ($dff) from module pipelined_8bit_adder.
Setting constant 0-bit at position 8 on $procdff$28 ($dff) from module pipelined_8bit_adder.

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

10.16. Rerunning OPT passes. (Maybe there is more to do..)

10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 0 changes.

10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

10.20. Executing OPT_DFF pass (perform DFF optimizations).

10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

10.23. Finished OPT passes. (There is nothing left to do.)

11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

13. Executing CHECK pass (checking for obvious problems).
Checking module pipelined_8bit_adder...
Found and reported 0 problems.

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

14.9. Finished OPT passes. (There is nothing left to do.)

15. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 address bits (of 9) from memory init port pipelined_8bit_adder.$auto$proc_memwr.cc:45:proc_memwr$35 (ram).
Removed top 3 bits (of 9) from mux cell pipelined_8bit_adder.$procmux$19 ($mux).
Removed top 3 bits (of 9) from wire pipelined_8bit_adder.$0$memwr$\ram$./benchmark/pipelined_8bit_adder.v:100$1_ADDR[8:0]$4.
Removed top 3 bits (of 9) from wire pipelined_8bit_adder.waddr_st0.
Removed top 3 bits (of 9) from wire pipelined_8bit_adder.waddr_st1.

16. Executing PEEPOPT pass (run peephole optimizers).

17. Executing PMUXTREE pass.

18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

19. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\ram'[0] in module `\pipelined_8bit_adder': FF found, but with a mux select that doesn't seem to correspond to transparency logic.
Checking read port address `\ram'[0] in module `\pipelined_8bit_adder': no address FF found.

20. Executing WREDUCE pass (reducing word size of cells).

21. Executing TECHMAP pass (map to technology primitives).

21.1. Executing Verilog-2005 frontend: /home/arslan/Downloads/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/home/arslan/Downloads/OpenFPGA/build/yosys/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

21.2. Executing Verilog-2005 frontend: /home/arslan/Downloads/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v
Parsing Verilog input from `/home/arslan/Downloads/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_dsp_map.v' to AST representation.
Generating RTLIL representation for module `\mult_36x36'.
Successfully finished Verilog frontend.

21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

22. Executing OPT_EXPR pass (perform const folding).

23. Executing WREDUCE pass (reducing word size of cells).
Warning: Selection "Extract" did not match any module.
Warning: Selection "arithmetic" did not match any module.
Warning: Selection "functions" did not match any module.

24. Executing TECHMAP pass (map to technology primitives).

24.1. Executing Verilog-2005 frontend: /home/arslan/Downloads/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/arslan/Downloads/OpenFPGA/build/yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

24.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=7:B_SIGNED=0:B_WIDTH=7:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$5e422c97d4648c7864402691d7b06fc43e6ffb33\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~271 debug messages>

25. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pipelined_8bit_adder:
  created 0 $alu and 0 $macc cells.

26. Executing SHARE pass (SAT-based resource sharing).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.
<suppressed ~25 debug messages>

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..
Removed 7 unused cells and 36 unused wires.
<suppressed ~8 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing FSM pass (extract and optimize FSM).

28.1. Executing FSM_DETECT pass (finding FSMs in design).

28.2. Executing FSM_EXTRACT pass (extracting FSM from design).

28.3. Executing FSM_OPT pass (simple optimizations of FSMs).

28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

28.5. Executing FSM_OPT pass (simple optimizations of FSMs).

28.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

28.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

28.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

29.3. Executing OPT_DFF pass (perform DFF optimizations).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

29.5. Finished fast OPT passes.

30. Executing MEMORY pass.

30.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

30.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

30.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing pipelined_8bit_adder.ram write port 0.

30.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

30.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\ram'[0] in module `\pipelined_8bit_adder': no output FF found.
Checking read port address `\ram'[0] in module `\pipelined_8bit_adder': no address FF found.

30.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

30.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

30.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

30.10. Executing MEMORY_COLLECT pass (generating $mem cells).

31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

32. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing pipelined_8bit_adder.ram:
  Properties: ports=2 bits=512 rports=1 wports=1 dbits=8 abits=6 words=64
  Checking rule #1 for bram type $__MY_DPRAM_1024x8 (variant 1):
    Bram geometry: abits=10 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__MY_DPRAM_1024x8: awaste=960 dwaste=0 bwaste=7680 waste=7680 efficiency=6
    Rule #1 for bram type $__MY_DPRAM_1024x8 (variant 1) accepted.
    Mapping to bram type $__MY_DPRAM_1024x8 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port A1.
      Read port #0 is in clock domain !~async~.
        Bram port B1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__MY_DPRAM_1024x8 failed.
  No acceptable bram resources found.

33. Executing TECHMAP pass (map to technology primitives).

33.1. Executing Verilog-2005 frontend: /home/arslan/Downloads/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v
Parsing Verilog input from `/home/arslan/Downloads/OpenFPGA/openfpga_flow/openfpga_yosys_techlib/k6_frac_N10_tileable_adder_chain_dpram8K_dsp36_40nm_bram_map.v' to AST representation.
Generating RTLIL representation for module `\$__MY_DPRAM_1024x8'.
Successfully finished Verilog frontend.

33.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.
<suppressed ~14 debug messages>

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \ram in module \pipelined_8bit_adder:
  created 64 $dff cells and 0 static cells of width 8.
  read interface: 0 $dff and 63 $mux cells.
  write interface: 64 write mux blocks.

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.
<suppressed ~12 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

36.6. Executing OPT_DFF pass (perform DFF optimizations).

36.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..
Removed 0 unused cells and 134 unused wires.
<suppressed ~1 debug messages>

36.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

36.9. Rerunning OPT passes. (Maybe there is more to do..)

36.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

36.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 0 changes.

36.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

36.13. Executing OPT_DFF pass (perform DFF optimizations).

36.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

36.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

36.16. Finished OPT passes. (There is nothing left to do.)

37. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /home/arslan/Downloads/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v
Parsing Verilog input from `/home/arslan/Downloads/OpenFPGA/build/yosys/bin/../share/yosys/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

39. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

40. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:92:addr_decode$625 ($not).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:92:addr_decode$627 ($not).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:92:addr_decode$629 ($not).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:92:addr_decode$635 ($not).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:92:addr_decode$637 ($not).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:92:addr_decode$639 ($not).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1001 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1007 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1013 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1019 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1025 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1031 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1033 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1039 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1045 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1051 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1057 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1063 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1069 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$1075 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$631 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$633 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$641 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$643 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$645 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$653 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$655 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$663 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$665 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$667 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$673 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$675 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$683 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$685 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$687 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$693 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$695 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$701 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$703 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$705 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$711 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$713 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$721 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$723 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$729 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$735 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$741 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$747 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$753 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$759 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$765 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$773 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$775 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$777 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$783 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$789 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$795 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$801 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$807 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$813 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$819 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$825 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$827 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$833 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$839 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$845 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$851 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$857 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$863 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$869 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$877 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$879 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$881 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$887 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$893 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$899 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$905 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$911 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$917 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$923 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$929 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$931 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$937 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$943 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$949 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$955 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$961 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$967 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$973 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$979 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$981 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$983 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$989 ($and).
Mapping pipelined_8bit_adder.$auto$memory_map.cc:97:addr_decode$995 ($and).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][0][0]$436 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][1][0]$439 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][1][1]$442 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][2][0]$445 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][2][1]$448 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][2][2]$451 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][2][3]$454 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][3][0]$457 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][3][1]$460 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][3][2]$463 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][3][3]$466 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][3][4]$469 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][3][5]$472 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][3][6]$475 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][3][7]$478 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][0]$481 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][10]$511 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][11]$514 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][12]$517 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][13]$520 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][14]$523 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][15]$526 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][1]$484 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][2]$487 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][3]$490 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][4]$493 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][5]$496 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][6]$499 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][7]$502 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][8]$505 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][4][9]$508 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][0]$529 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][10]$559 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][11]$562 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][12]$565 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][13]$568 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][14]$571 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][15]$574 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][16]$577 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][17]$580 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][18]$583 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][19]$586 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][1]$532 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][20]$589 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][21]$592 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][22]$595 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][23]$598 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][24]$601 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][25]$604 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][26]$607 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][27]$610 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][28]$613 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][29]$616 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][2]$535 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][30]$619 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][31]$622 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][3]$538 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][4]$541 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][5]$544 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][6]$547 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][7]$550 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][8]$553 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$rdmux[0][5][9]$556 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wren[0][0][0]$647 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[10][0][0]$737 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[11][0][0]$743 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[12][0][0]$749 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[13][0][0]$755 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[14][0][0]$761 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[15][0][0]$767 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[16][0][0]$779 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[17][0][0]$785 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[18][0][0]$791 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[19][0][0]$797 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[1][0][0]$657 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[20][0][0]$803 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[21][0][0]$809 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[22][0][0]$815 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[23][0][0]$821 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[24][0][0]$829 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[25][0][0]$835 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[26][0][0]$841 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[27][0][0]$847 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[28][0][0]$853 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[29][0][0]$859 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[2][0][0]$669 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[30][0][0]$865 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[31][0][0]$871 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[32][0][0]$883 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[33][0][0]$889 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[34][0][0]$895 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[35][0][0]$901 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[36][0][0]$907 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[37][0][0]$913 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[38][0][0]$919 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[39][0][0]$925 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[3][0][0]$677 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[40][0][0]$933 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[41][0][0]$939 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[42][0][0]$945 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[43][0][0]$951 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[44][0][0]$957 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[45][0][0]$963 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[46][0][0]$969 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[47][0][0]$975 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[48][0][0]$985 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[49][0][0]$991 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[4][0][0]$689 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[50][0][0]$997 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[51][0][0]$1003 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[52][0][0]$1009 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[53][0][0]$1015 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[54][0][0]$1021 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[55][0][0]$1027 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[56][0][0]$1035 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[57][0][0]$1041 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[58][0][0]$1047 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[59][0][0]$1053 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[5][0][0]$697 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[60][0][0]$1059 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[61][0][0]$1065 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[62][0][0]$1071 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[63][0][0]$1077 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[6][0][0]$707 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[7][0][0]$715 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[8][0][0]$725 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wren[9][0][0]$731 ($and).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[0][0][0]$649 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[10][0][0]$739 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[11][0][0]$745 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[12][0][0]$751 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[13][0][0]$757 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[14][0][0]$763 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[15][0][0]$769 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[16][0][0]$781 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[17][0][0]$787 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[18][0][0]$793 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[19][0][0]$799 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[1][0][0]$659 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[20][0][0]$805 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[21][0][0]$811 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[22][0][0]$817 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[23][0][0]$823 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[24][0][0]$831 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[25][0][0]$837 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[26][0][0]$843 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[27][0][0]$849 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[28][0][0]$855 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[29][0][0]$861 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[2][0][0]$671 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[30][0][0]$867 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[31][0][0]$873 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[32][0][0]$885 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[33][0][0]$891 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[34][0][0]$897 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[35][0][0]$903 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[36][0][0]$909 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[37][0][0]$915 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[38][0][0]$921 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[39][0][0]$927 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[3][0][0]$679 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[40][0][0]$935 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[41][0][0]$941 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[42][0][0]$947 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[43][0][0]$953 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[44][0][0]$959 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[45][0][0]$965 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[46][0][0]$971 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[47][0][0]$977 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[48][0][0]$987 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[49][0][0]$993 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[4][0][0]$691 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[50][0][0]$999 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[51][0][0]$1005 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[52][0][0]$1011 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[53][0][0]$1017 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[54][0][0]$1023 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[55][0][0]$1029 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[56][0][0]$1037 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[57][0][0]$1043 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[58][0][0]$1049 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[59][0][0]$1055 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[5][0][0]$699 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[60][0][0]$1061 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[61][0][0]$1067 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[62][0][0]$1073 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[63][0][0]$1079 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[6][0][0]$709 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[7][0][0]$717 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[8][0][0]$727 ($mux).
Mapping pipelined_8bit_adder.$memory\ram$wrmux[9][0][0]$733 ($mux).
Mapping pipelined_8bit_adder.$memory\ram[0]$308 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[10]$328 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[11]$330 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[12]$332 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[13]$334 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[14]$336 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[15]$338 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[16]$340 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[17]$342 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[18]$344 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[19]$346 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[1]$310 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[20]$348 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[21]$350 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[22]$352 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[23]$354 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[24]$356 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[25]$358 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[26]$360 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[27]$362 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[28]$364 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[29]$366 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[2]$312 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[30]$368 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[31]$370 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[32]$372 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[33]$374 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[34]$376 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[35]$378 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[36]$380 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[37]$382 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[38]$384 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[39]$386 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[3]$314 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[40]$388 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[41]$390 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[42]$392 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[43]$394 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[44]$396 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[45]$398 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[46]$400 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[47]$402 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[48]$404 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[49]$406 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[4]$316 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[50]$408 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[51]$410 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[52]$412 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[53]$414 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[54]$416 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[55]$418 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[56]$420 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[57]$422 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[58]$424 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[59]$426 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[5]$318 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[60]$428 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[61]$430 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[62]$432 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[63]$434 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[6]$320 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[7]$322 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[8]$324 ($dff).
Mapping pipelined_8bit_adder.$memory\ram[9]$326 ($dff).

41. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

43. Executing OPT_DFF pass (perform DFF optimizations).

44. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_8bit_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_8bit_adder.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_8bit_adder'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_8bit_adder.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing ABC pass (technology mapping using ABC).

46.1. Extracting gate netlist of module `\pipelined_8bit_adder' to `<abc-temp-dir>/input.blif'..
Extracted 1220 gates and 1768 wires to a netlist network with 548 inputs and 520 outputs.

46.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

46.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      770
ABC RESULTS:        internal signals:      700
ABC RESULTS:           input signals:      548
ABC RESULTS:          output signals:      520
Removing temp directory.

47. Executing HIERARCHY pass (managing design hierarchy).

47.1. Analyzing design hierarchy..
Top module:  \pipelined_8bit_adder

47.2. Analyzing design hierarchy..
Top module:  \pipelined_8bit_adder
Removed 0 unused modules.

48. Printing statistics.

=== pipelined_8bit_adder ===

   Number of wires:               1735
   Number of wire bits:           3177
   Number of public wires:         116
   Number of public wire bits:     641
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1332
     $_DFF_P_                      562
     $lut                          770

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_8bit_adder..
Removed 0 unused cells and 863 unused wires.
<suppressed ~8 debug messages>

50. Executing BLIF backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: e8e6f71ad4, CPU: user 0.46s system 0.02s, MEM: 17.00 MB peak
Yosys 0.27+3 (git sha1 b58664d44, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 80% 1x abc (1 sec), 7% 24x opt_expr (0 sec), ...
0